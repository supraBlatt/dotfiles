env:
  TERM: xterm-256color

import:
  - ~/.config/alacritty/dracula.yml

window:
  dimensions:
    columns: 0
    lines: 0

  position:
    x: 0
    y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 8
    y: 8

  # Spread additional padding evenly around the terminal content.
  #dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Maximized

gtk_theme_variant: dark

scrolling:
  history: 10000
  multiplier: 3

font:
  normal:
    family: "JetBrains Mono Nerd Font"
    style: Regular

  bold:
    family: "JetBrains Mono Nerd Font"

  italic:
    family: "JetBrains Mono Nerd Font"

  bold_italic:
    family: "JetBrains Mono Nerd Font"

  size: 11.5

  offset:
    x: 0
    y: 0

  glyph_offset:
    x: 0
    y: 0

draw_bold_text_with_bright_colors: false

# Colors (Dracula)
colors:
  # Default colors
  primary:
    background: "0x282a36"
    foreground: "0xf8f8f2"

    # Bright and dim foreground colors
    #
    # The dimmed foreground color is calculated automatically if it is not present.
    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
    # is `false`, the normal foreground color will be used.
    #dim_foreground: '0x9a9a9a'
    #bright_foreground: '0xffffff'

  # Cursor colors
  #
  # Colors which should be used to draw the terminal cursor. If these are unset,
  # the cursor color will be the inverse of the cell color.
  cursor:
    text: "0x44475a"
    cursor: "0xf8f8f2"

  # Selection colors
  #
  # Colors which should be used to draw the selection area. If selection
  # background is unset, selection color will be the inverse of the cell colors.
  # If only text is unset the cell text color will remain the same.
  selection:
    text: "0xf8f8f2"
    background: "0x44475a"

  # Normal colors
  normal:
    black: "0x000000"
    red: "0xff5555"
    green: "0x50fa7b"
    yellow: "0xf1fa8c"
    blue: "0xbd93f9"
    magenta: "0xff79c6"
    cyan: "0x8be9fd"
    white: "0xbfbfbf"

  # Bright colors
  bright:
    black: "0x4d4d4d"
    red: "0xff6e67"
    green: "0x5af78e"
    yellow: "0xf4f99d"
    blue: "0xcaa9fa"
    magenta: "0xff92d0"
    cyan: "0x9aedfe"
    white: "0xe6e6e6"

  # Dim colors
  #
  # If the dim colors are not set, they will be calculated automatically based
  # on the `normal` colors.
  dim:
    black: "0x14151b"
    red: "0xff2222"
    green: "0x1ef956"
    yellow: "0xebf85b"
    blue: "0x4d5b86"
    magenta: "0xff46b0"
    cyan: "0x59dffc"
    white: "0xe6e6d1"

  # Indexed Colors
  #
  # The indexed colors include all colors from 16 to 256.
  # When these are not set, they're filled with sensible defaults.
  #
  # Example:
  #   `- { index: 16, color: '0xff00ff' }`
  #
  indexed_colors: []

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
#visual_bell:
#  animation: EaseOutExpo
#  duration: 0
#  color: '#ffffff'

background_opacity: 1.0

#selection:
#semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"

# When set to `true`, selected text will be copied to the primary clipboard.
#save_to_clipboard: false

# Allow terminal applications to change Alacritty's window title.
#dynamic_title: true

cursor:
  style: Underline
  unfocused_hollow: false

live_config_reload: true

shell:
  program: /usr/bin/fish
  args:
    - --login

# Send ESC (\x1b) before characters when alt is pressed.
#alt_send_esc: true

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  #double_click: { threshold: 300 }
  #triple_click: { threshold: 300 }

  hide_when_typing: false

  url:
    launcher:
      program: xdg-open
      args: []

    modifiers: None
# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
#key_bindings:
# (Windows, Linux, and BSD only)
#- { key: V,        mods: Control|Shift, action: Paste            }
#- { key: C,        mods: Control|Shift, action: Copy             }
#- { key: Insert,   mods: Shift,         action: PasteSelection   }
#- { key: Key0,     mods: Control,       action: ResetFontSize    }
#- { key: Equals,   mods: Control,       action: IncreaseFontSize }
#- { key: Add,      mods: Control,       action: IncreaseFontSize }
#- { key: Subtract, mods: Control,       action: DecreaseFontSize }
#- { key: Minus,    mods: Control,       action: DecreaseFontSize }

# (Windows only)
#- { key: Return,   mods: Alt,           action: ToggleFullscreen }

# (macOS only)
#- { key: Key0,   mods: Command,         action: ResetFontSize    }
#- { key: Equals, mods: Command,         action: IncreaseFontSize }
#- { key: Add,    mods: Command,         action: IncreaseFontSize }
#- { key: Minus,  mods: Command,         action: DecreaseFontSize }
#- { key: K,      mods: Command,         action: ClearHistory     }
#- { key: K,      mods: Command,         chars: "\x0c"            }
#- { key: V,      mods: Command,         action: Paste            }
#- { key: C,      mods: Command,         action: Copy             }
#- { key: H,      mods: Command,         action: Hide             }
#- { key: M,      mods: Command,         action: Minimize         }
#- { key: Q,      mods: Command,         action: Quit             }
#- { key: W,      mods: Command,         action: Quit             }
#- { key: F,      mods: Command|Control, action: ToggleFullscreen }

#- { key: Paste,                    action: Paste                            }
#- { key: Copy,                     action: Copy                             }
#- { key: L,         mods: Control, action: ClearLogNotice                   }
#- { key: L,         mods: Control, chars: "\x0c"                            }
#- { key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
#- { key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
#- { key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt       }
#- { key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt       }

#debug:
# Display the time it takes to redraw each frame.
#render_timer: false

# Keep the log file after quitting Alacritty.
#persistent_logging: false

# Log level
#
# Values for `log_level`:
#   - None
#   - Error
#   - Warn
#   - Info
#   - Debug
#   - Trace
#log_level: Warn

# Print all received window events.
#print_events: false
